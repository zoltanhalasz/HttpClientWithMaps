@page "/weather"

@inject IHttpClientFactory _clientFactory


<h1>Click on the map</h1>
<div class="row">

    <div class="col-sm-8">
        <div>
            <RadzenGoogleMap Zoom="@zoom"
                             Center="@(new GoogleMapPosition() { Lat = selectedLocation.latt, Lng = selectedLocation._long })"
                             MapClick="@MapClick" MarkerClick="@MarkerClick" Style="min-height: 400px">
                <Markers>
                    @if (locations != null)
                    {
                        foreach (var loc in locations)
                        {
                            <RadzenGoogleMapMarker Title="@loc.woeid.ToString()" Label="@loc.title" Position="@(new GoogleMapPosition() { Lat = loc.latt, Lng = loc._long})" />
                        }
                    }

                </Markers>
            </RadzenGoogleMap>
        </div>
    </div>

    <div class="col-sm-4">
        @if (string.IsNullOrWhiteSpace(errorString) == false)
        {
            <div class="h4" style="color: red">@errorString</div>
        }
        else if (forecast is null)
        {

            <RadzenProgressBar Value="100" ShowValue="false" Mode="ProgressBarMode.Indeterminate" Style="margin-bottom: 20px" />
        }
        else
        {
            <strong>@selectedLocation.title</strong>
            <span>Weather Forecast</span>
            <br />
            <table class="table table-responsive-sm">
                <thead class="thead-dark">
                    <tr>
                        <th>Date</th>
                        <th>Weather State</th>
                        <th>Low</th>
                        <th>High</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var w in forecast.Consolidated_weather)
                    {
                        <tr>
                            <td>@w.applicable_date</td>
                            <td><img src="/icons/@(w.weather_state_abbr).svg" style="max-width: 50%"/></td>
                            <td>@Math.Round(w.min_temp, 1)  °</td>
                            <td>@Math.Round(w.max_temp, 1)  °</td>
                        </tr>
                    }
                </tbody>
            </table>
        }

    </div>
</div>

<div class="row">

</div>



@code {
    WeatherForecastModel forecast;
    List<LocationModel> locations;
    string errorString;
    LocationModel selectedLocation;

    int zoom = 5;

    Dictionary<DateTime, string> events = new Dictionary<DateTime, string>();

    protected override async Task OnInitializedAsync()
    {

        locations = new List<LocationModel>();
        selectedLocation = new LocationModel();
        selectedLocation.woeid = 804365;
        selectedLocation.title = "Budapest";
        selectedLocation.latt = 47.4811281;
        selectedLocation._long = 18.9902195;
        await FillForecast(selectedLocation.woeid.ToString());
    }

    async Task FillForecast(string location)
    {
        var client = _clientFactory.CreateClient("meta");

        try
        {
            forecast = null;
            if (location != null) forecast = await client.GetFromJsonAsync<WeatherForecastModel>("location/" + location);
            errorString = null;
        }
        catch (Exception ex)
        {
            errorString = $"There was an error getting our forecast: { ex.Message }";
        }
    }

    async Task GetLocations(double lat, double lng)
    {
        var client = _clientFactory.CreateClient("meta");

        try
        {
            locations = await client.GetFromJsonAsync<List<LocationModel>>("location/search/?lattlong=" + lat.ToString() + "," + lng.ToString());
            errorString = null;
            foreach (var loc in locations)
            {
                var commaposition = loc.latt_long.IndexOf(",");
                loc.latt = double.Parse(loc.latt_long.Substring(0, commaposition - 1));
                loc._long = double.Parse(loc.latt_long.Substring(commaposition + 1, loc.latt_long.Length - commaposition - 1)); ;
            }
        }
        catch (Exception ex)
        {
            errorString = $"There was an error getting our locations: { ex.Message }";
        }

    }

    async Task MapClick(GoogleMapClickEventArgs args)
    {
        //events.Add(DateTime.Now, $"Map clicked at Lat: {args.Position.Lat}, Lng: {args.Position.Lng}");
        await GetLocations(args.Position.Lat, args.Position.Lng);
        StateHasChanged();
    }

    async Task MarkerClick(RadzenGoogleMapMarker marker)
    {

        Console.WriteLine(DateTime.Now.ToString() +
            $"Map {marker.Title} marker clicked. Marker position -> Lat: {marker.Position.Lat}, Lng: {marker.Position.Lng}");
        selectedLocation = locations.First(x=> x.title== marker.Label);

        //await FillForecast(marker.Title);
        //await GetLocations(marker.Position.Lat, marker.Position.Lng);

        await Task.WhenAll(FillForecast(marker.Title), GetLocations(marker.Position.Lat, marker.Position.Lng));

        StateHasChanged();
    }
}
